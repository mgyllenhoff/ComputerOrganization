#
# Program Name: random.s
# Author: Madeline Gyllenhoff
# Date: 11/5/2023
# Purpose: Allow a user to guess a random number generated by the computer from 1 to maximum (set by user)
# Functions:
#	setSeed	- Set seed for a random number
#	randFunction - Generate random number from seed and maximum limit
# Inputs: 
#	Seed to be used to generate random number
#	Guess for the random number
# Outputs:
#	Whether the number is correct, too low, or too high
# Dictionary:
#	r4 - Seed (and temporary random number)
#	r5 - Random number
#	r6 - Total guesses by yser
#	r7 - User's guess
#

.text
.global main
.global setSeed
.global randFunc

main:
	SUB sp, sp, #4
	STR lr, [sp]

	#Prompt for the seed
	LDR r0, =promptSeed
	BL printf
	LDR r0, =format
	LDR r1, =seed
	BL scanf
	LDR r4, =seed // Move seed into r4 temporarily, needs to move back to r0 before setSeed call
	LDR r4, [r4]

	#Prompt for the upper limit
	LDR r0, =promptUpper
	BL printf
	LDR r0, =format
	LDR r1, =upper
	BL scanf
	LDR r5, =upper
	LDR r5, [r5]

	# Set the seed for the random number
	MOV r0, r4
	BL setSeed

	# Generate first random number
	BL randFunc
	MOV r5, r0

	# Loop block!
	MOV r6, #0 // Initialize total number of guesses

	guessLoop:
		ADD r6, r6, #1

		# Prompt for the guess
		LDR r0, =promptGuess
		BL printf
		LDR r0, =format
		LDR r1, =guess
		BL scanf
		LDR r7, =guess
		LDR r7, [r7]

		# If the guess is correct, go to correct output
		CMP r5, r7
		BEQ correct

		# Else if the guess is too small, go to tooSmall output and repeat loop 
		CMP r5, r7
		BGT tooSmall	

		# Else (guess is too big), go to tooBig output and repeat loop
		B tooBig

		# Tell user guess is too small and repeat loop to get new guess
		tooSmall:
			LDR r0, =outputSmall
			BL printf
			B guessLoop
		
		# Tell user guess is too big and repeat loop to get new guess
		tooBig:
			LDR r0, =outputBig
			BL printf
			B guessLoop

	# Guess is correct so tell user and print total number of guesses they took
	correct:
		MOV r1, r6
		LDR r0, =outputCorrect
		BL printf
		B endGuessLoop

	endGuessLoop:
	
	LDR lr, [sp]
	ADD sp, sp, #4
	MOV pc, lr

.data
	promptSeed: .asciz "\nEnter seed: "
	promptUpper: .asciz "\nEnter upper limit: "
	promptGuess: .asciz "\nGuess the number: "
	format: .asciz "%d"
	seed: .word 0
	upper: .word 0
	guess: .word 0
	outputCorrect: .asciz "\nYou are correct! Total guesses: %d\n"
	outputSmall: .asciz "\nYour guess is too low\n"
	outputBig: .asciz "\nYour guess is too high\n"

.text
# Function: setSeed
# Author: Charles Kann
# Date: 7/31/2020
# Purpose: Set a see for the randFunc
# Input: r0: seed
# Output: None
# Side effect: Seed is set
setSeed:
	SUB sp, sp, #4
	STR lr, [sp]
	BL srand // r0 already has the seed
	LDR lr, [sp]
	ADD sp, sp, #4
	MOV pc, lr

.text
# Function: randFunc
# Author: Charles Kann
# Date: 7/31/2020
# Purpose: To retrieve a random number from 0..r0
randFunc:
	SUB sp, sp, #8
	STR lr, [sp]
	STR r4, [sp, #4]
	
	#Get the random number, setting the limit using a modulus operation
	BL rand
	MOV r4, r0 // Save the random number
	
	# Modulus operation
	MOV r1, r5
	BL __aeabi_idiv
	MOV r1, r5
	MUL r0, r0, r1
	SUB r0, r4, r0
	LDR lr, [sp]
	LDR r4, [sp, #4]

	ADD sp, sp, #8
	MOV pc, lr
